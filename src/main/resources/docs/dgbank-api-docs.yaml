openapi: 3.0.3
info:
  title: DG Bank API
  description: |
    API completa per il sistema bancario DG Bank.
    
    ## Autenticazione
    L'API utilizza JWT Bearer token per l'autenticazione. Dopo il login o la registrazione, includi il token nell'header Authorization:
    `Authorization: Bearer <token>`
    
    ## Rate Limiting
    - Token JWT: 24 ore di validità
    - Refresh token: 7 giorni di validità
    
    ## Formati Monetari
    Tutti gli importi sono gestiti con precisione decimale (15,2) per evitare errori di arrotondamento.
  version: 1.0.0
  contact:
    name: DG Bank Development Team
    email: dev@dgbank.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8080
    description: Development server
  - url: https://api.dgbank.com
    description: Production server

tags:
  - name: Test
    description: Endpoint di test per verificare la connettività
  - name: Authentication
    description: Operazioni di autenticazione e registrazione
  - name: Accounts
    description: Gestione dei conti bancari
  - name: Cards
    description: Gestione delle carte di debito/credito
  - name: Transactions
    description: Operazioni finanziarie e movimenti

paths:
  # Test endpoint
  /test/hello:
    get:
      tags:
        - Test
      summary: Test di connettività
      description: Verifica che l'API sia funzionante
      responses:
        '200':
          description: API funzionante
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "DG Bank API is running!"

  # Authentication endpoints
  /auth/register:
    post:
      tags:
        - Authentication
      summary: Registrazione nuovo utente
      description: |
        Registra un nuovo utente nel sistema. L'utente deve essere maggiorenne (18+).
        La password viene crittografata con BCrypt prima del salvataggio.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
            example:
              email: "mario.rossi@email.com"
              password: "password123"
              firstName: "Mario"
              lastName: "Rossi"
              dateOfBirth: "1990-01-15"
              phoneNumber: "+39 333 1234567"
              documentType: "CARTA_IDENTITA"
              documentNumber: "AB1234567"
              documentExpiry: "2030-01-15"
              documentIssuer: "Comune di Milano"
              street: "Via Roma 123"
              city: "Milano"
              postalCode: "20100"
              province: "MI"
              country: "Italia"
      responses:
        '201':
          description: Utente registrato con successo
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Errore nei dati di registrazione
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                email_exists:
                  summary: Email già registrata
                  value:
                    success: false
                    message: "Email già registrata: mario.rossi@email.com"
                document_exists:
                  summary: Documento già registrato
                  value:
                    success: false
                    message: "Documento già registrato"
                underage:
                  summary: Utente minorenne
                  value:
                    success: false
                    message: "L'utente deve essere maggiorenne"

  /auth/login:
    post:
      tags:
        - Authentication
      summary: Login utente
      description: Autentica un utente esistente e restituisce i token JWT
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
            example:
              email: "mario.rossi@email.com"
              password: "password123"
      responses:
        '200':
          description: Login effettuato con successo
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Credenziali non valide
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "Credenziali non valide"

  /auth/refresh-token:
    post:
      tags:
        - Authentication
      summary: Rinnovo token
      description: Rinnova il token di accesso utilizzando il refresh token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
      responses:
        '200':
          description: Token rinnovato con successo
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        '401':
          description: Refresh token non valido
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/validate-token:
    post:
      tags:
        - Authentication
      summary: Validazione token
      description: Verifica la validità di un token JWT
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ValidateTokenRequest'
      responses:
        '200':
          description: Risultato validazione
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidateTokenResponse'

  /auth/check-email/{email}:
    get:
      tags:
        - Authentication
      summary: Verifica disponibilità email
      description: Controlla se un indirizzo email è disponibile per la registrazione
      parameters:
        - name: email
          in: path
          required: true
          schema:
            type: string
            format: email
          example: "test@email.com"
      responses:
        '200':
          description: Stato disponibilità email
          content:
            application/json:
              schema:
                type: object
                properties:
                  available:
                    type: boolean
                    description: true se l'email è disponibile
                  email:
                    type: string
                    format: email
              example:
                available: true
                email: "test@email.com"

  # Account endpoints
  /accounts/create:
    post:
      tags:
        - Accounts
      summary: Crea nuovo conto
      description: |
        Crea un nuovo conto bancario per un utente esistente. 
        Genera automaticamente un IBAN italiano nel formato: IT XX X05472 81110 XXXXXXXXXXXX
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAccountRequest'
      responses:
        '201':
          description: Conto creato con successo
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountResponse'
        '400':
          description: Errore nella creazione del conto
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Utente non trovato
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /accounts/{accountId}:
    get:
      tags:
        - Accounts
      summary: Dettagli conto
      description: Ottieni i dettagli completi di un conto specifico
      security:
        - bearerAuth: []
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: integer
            format: int64
          example: 1
      responses:
        '200':
          description: Dettagli del conto
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountResponse'
        '404':
          description: Conto non trovato
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /accounts/number/{accountNumber}:
    get:
      tags:
        - Accounts
      summary: Conto per numero IBAN
      description: Ottieni un conto tramite il numero IBAN
      security:
        - bearerAuth: []
      parameters:
        - name: accountNumber
          in: path
          required: true
          schema:
            type: string
            maxLength: 34
          example: "IT 60 X05472 81110 000000123456"
      responses:
        '200':
          description: Dettagli del conto
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountResponse'
        '404':
          description: Conto non trovato
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /accounts/{accountId}/balance:
    get:
      tags:
        - Accounts
      summary: Saldo conto
      description: Ottieni il saldo corrente di un conto
      security:
        - bearerAuth: []
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Saldo del conto
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  accountId:
                    type: integer
                    format: int64
                    example: 1
                  balance:
                    type: string
                    description: Importo con precisione decimale
                    example: "1250.75"
        '404':
          description: Conto non trovato
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /accounts/{accountId}/freeze:
    put:
      tags:
        - Accounts
      summary: Congela conto
      description: Congela un conto bancario (imposta isActive = false)
      security:
        - bearerAuth: []
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Conto congelato con successo
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Errore nel congelamento del conto
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /accounts/{accountId}/unfreeze:
    put:
      tags:
        - Accounts
      summary: Scongela conto
      description: Scongela un conto bancario (imposta isActive = true)
      security:
        - bearerAuth: []
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Conto scongelato con successo
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Errore nello scongelamento del conto
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /accounts/user/{userId}:
    get:
      tags:
        - Accounts
      summary: Conti utente
      description: Ottieni tutti i conti di un utente con il saldo totale
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Lista dei conti dell'utente
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  accounts:
                    type: array
                    items:
                      $ref: '#/components/schemas/Account'
                  totalBalance:
                    type: string
                    description: Saldo totale di tutti i conti
                    example: "5420.30"
        '500':
          description: Errore interno del server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Card endpoints
  /cards/issue:
    post:
      tags:
        - Cards
      summary: Emetti nuova carta
      description: |
        Emette una nuova carta collegata ad un conto esistente.
        Genera automaticamente numero carta, CVV e data di scadenza (4 anni).
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewCardRequest'
      responses:
        '201':
          description: Carta emessa con successo
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardResponse'
        '400':
          description: Errore nell'emissione della carta
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Account non trovato
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /cards/{cardId}:
    get:
      tags:
        - Cards
      summary: Dettagli carta
      description: Ottieni i dettagli di una carta specifica (numero mascherato per sicurezza)
      security:
        - bearerAuth: []
      parameters:
        - name: cardId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Dettagli della carta
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardResponse'
        '404':
          description: Carta non trovata
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /cards/number/{cardNumber}:
    get:
      tags:
        - Cards
      summary: Carta per numero
      description: Ottieni una carta tramite il numero
      security:
        - bearerAuth: []
      parameters:
        - name: cardNumber
          in: path
          required: true
          schema:
            type: string
            maxLength: 19
          example: "1234 5678 9012 3456"
      responses:
        '200':
          description: Dettagli della carta
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardResponse'
        '404':
          description: Carta non trovata
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /cards/user/{userId}:
    get:
      tags:
        - Cards
      summary: Carte utente
      description: Ottieni tutte le carte di un utente
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Lista delle carte dell'utente
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  cards:
                    type: array
                    items:
                      $ref: '#/components/schemas/Card'

  /cards/account/{accountId}:
    get:
      tags:
        - Cards
      summary: Carte del conto
      description: Ottieni tutte le carte collegate ad un conto specifico
      security:
        - bearerAuth: []
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Lista delle carte del conto
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  cards:
                    type: array
                    items:
                      $ref: '#/components/schemas/Card'

  /cards/{cardId}/block:
    put:
      tags:
        - Cards
      summary: Blocca carta
      description: Blocca una carta (imposta isActive = false)
      security:
        - bearerAuth: []
      parameters:
        - name: cardId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Carta bloccata con successo
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Errore nel blocco della carta
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /cards/{cardId}/activate:
    put:
      tags:
        - Cards
      summary: Attiva carta
      description: Attiva una carta (imposta isActive = true)
      security:
        - bearerAuth: []
      parameters:
        - name: cardId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Carta attivata con successo
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Errore nell'attivazione della carta
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Transaction endpoints
  /transactions/deposit:
    post:
      tags:
        - Transactions
      summary: Effettua deposito
      description: |
        Effettua un deposito su un conto (es. da ATM o bonifico esterno).
        Il conto deve essere attivo e l'importo positivo.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionRequest'
            example:
              accountId: 1
              amount: "500.00"
              description: "Deposito contanti ATM"
      responses:
        '200':
          description: Deposito completato con successo
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionResponse'
        '400':
          description: Errore nel deposito
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                inactive_account:
                  summary: Conto non attivo
                  value:
                    success: false
                    message: "Il conto non è attivo"
                invalid_amount:
                  summary: Importo non valido
                  value:
                    success: false
                    message: "L'importo deve essere positivo"

  /transactions/withdraw:
    post:
      tags:
        - Transactions
      summary: Effettua prelievo
      description: |
        Effettua un prelievo da un conto (es. da ATM).
        Controlla che il saldo sia sufficiente.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionRequest'
            example:
              accountId: 1
              amount: "200.00"
              description: "Prelievo ATM"
      responses:
        '200':
          description: Prelievo completato con successo
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionResponse'
        '400':
          description: Errore nel prelievo
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                insufficient_funds:
                  summary: Saldo insufficiente
                  value:
                    success: false
                    message: "Saldo insufficiente"

  /transactions/transfer:
    post:
      tags:
        - Transactions
      summary: Effettua trasferimento
      description: |
        Effettua un trasferimento tra due conti interni della banca.
        Entrambi i conti devono essere attivi e il conto di origine deve avere saldo sufficiente.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransferRequest'
            example:
              fromAccountId: 1
              toAccountId: 2
              amount: "150.00"
              description: "Bonifico a Mario Rossi"
      responses:
        '200':
          description: Trasferimento completato con successo
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionResponse'
        '400':
          description: Errore nel trasferimento
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                same_account:
                  summary: Stesso conto
                  value:
                    success: false
                    message: "Non puoi trasferire denaro allo stesso conto"
                account_not_found:
                  summary: Conto non trovato
                  value:
                    success: false
                    message: "Conto di destinazione non trovato"

  /transactions/account/{accountId}:
    get:
      tags:
        - Transactions
      summary: Transazioni del conto
      description: Ottieni tutte le transazioni di un conto (sia in entrata che in uscita)
      security:
        - bearerAuth: []
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Lista delle transazioni
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  accountId:
                    type: integer
                    format: int64
                  transactions:
                    type: array
                    items:
                      $ref: '#/components/schemas/Transaction'
                  count:
                    type: integer
                    description: Numero totale di transazioni

  /transactions/account/{accountId}/paginated:
    get:
      tags:
        - Transactions
      summary: Transazioni paginate
      description: Ottieni le transazioni di un conto con paginazione (ordinate per data decrescente)
      security:
        - bearerAuth: []
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: page
          in: query
          description: Numero della pagina (0-based)
          required: false
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: size
          in: query
          description: Dimensione della pagina
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
      responses:
        '200':
          description: Lista paginata delle transazioni
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedTransactionResponse'

  /transactions/account/{accountId}/recent:
    get:
      tags:
        - Transactions
      summary: Transazioni recenti
      description: Ottieni le transazioni più recenti di un conto
      security:
        - bearerAuth: []
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: limit
          in: query
          description: Numero massimo di transazioni da restituire
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 50
            default: 10
      responses:
        '200':
          description: Lista delle transazioni recenti
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  accountId:
                    type: integer
                    format: int64
                  transactions:
                    type: array
                    items:
                      $ref: '#/components/schemas/Transaction'
                  count:
                    type: integer

  /transactions/{transactionId}:
    get:
      tags:
        - Transactions
      summary: Dettagli transazione
      description: Ottieni i dettagli completi di una transazione specifica
      security:
        - bearerAuth: []
      parameters:
        - name: transactionId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Dettagli della transazione
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionResponse'
        '404':
          description: Transazione non trovata
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /transactions/{transactionId}/cancel:
    put:
      tags:
        - Transactions
      summary: Cancella transazione
      description: Cancella una transazione in stato PENDING
      security:
        - bearerAuth: []
      parameters:
        - name: transactionId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Transazione cancellata con successo
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Errore nella cancellazione
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                cannot_cancel:
                  summary: Transazione non cancellabile
                  value:
                    success: false
                    message: "Impossibile annullare: Solo transazioni PENDING possono essere cancellate"

  /transactions/user/{userId}/recent-incomes:
    get:
      tags:
        - Transactions
      summary: Entrate recenti utente
      description: Calcola il totale delle entrate recenti di un utente da una data specifica
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: sinceDate
          in: query
          description: Data di inizio per il calcolo (ISO 8601)
          required: false
          schema:
            type: string
            format: date-time
          example: "2024-01-01T00:00:00"
      responses:
        '200':
          description: Totale delle entrate recenti
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  userId:
                    type: integer
                    format: int64
                  sinceDate:
                    type: string
                    format: date-time
                  totalAmount:
                    type: string
                    description: Importo totale delle entrate
                    example: "2450.75"
        '400':
          description: Parametri non validi
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /transactions/user/{userId}/recent-expenses:
    get:
      tags:
        - Transactions
      summary: Uscite recenti utente
      description: Calcola il totale delle uscite recenti di un utente da una data specifica
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: sinceDate
          in: query
          description: Data di inizio per il calcolo (ISO 8601)
          required: false
          schema:
            type: string
            format: date-time
          example: "2024-01-01T00:00:00"
      responses:
        '200':
          description: Totale delle uscite recenti
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  userId:
                    type: integer
                    format: int64
                  sinceDate:
                    type: string
                    format: date-time
                  totalAmount:
                    type: string
                    description: Importo totale delle uscite
                    example: "1320.50"
        '400':
          description: Parametri non validi
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

# Components
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        Token JWT ottenuto tramite login o registrazione.
        Durata: 24 ore per access token, 7 giorni per refresh token.

  schemas:
    # Request DTOs
    RegisterRequest:
      type: object
      required:
        - email
        - password
        - firstName
        - lastName
        - dateOfBirth
        - phoneNumber
        - documentType
        - documentNumber
        - documentExpiry
        - documentIssuer
        - street
        - city
        - postalCode
        - province
        - country
      properties:
        email:
          type: string
          format: email
          maxLength: 100
          description: Indirizzo email univoco
        password:
          type: string
          minLength: 8
          description: Password che verrà crittografata con BCrypt
        firstName:
          type: string
          maxLength: 50
          description: Nome dell'utente
        lastName:
          type: string
          maxLength: 50
          description: Cognome dell'utente
        dateOfBirth:
          type: string
          format: date
          description: Data di nascita (deve essere maggiorenne)
        phoneNumber:
          type: string
          maxLength: 20
          description: Numero di telefono
        documentType:
          $ref: '#/components/schemas/DocumentType'
        documentNumber:
          type: string
          maxLength: 50
          description: Numero del documento di identità (deve essere univoco)
        documentExpiry:
          type: string
          format: date
          description: Data di scadenza del documento
        documentIssuer:
          type: string
          maxLength: 100
          description: Ente che ha rilasciato il documento
        street:
          type: string
          description: Via e numero civico
        city:
          type: string
          maxLength: 100
          description: Città di residenza
        postalCode:
          type: string
          maxLength: 10
          description: Codice postale/CAP
        province:
          type: string
          maxLength: 50
          description: Provincia di residenza
        country:
          type: string
          maxLength: 50
          description: Paese di residenza

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          description: Indirizzo email dell'utente
        password:
          type: string
          description: Password dell'utente

    RefreshTokenRequest:
      type: object
      required:
        - refreshToken
      properties:
        refreshToken:
          type: string
          description: Token di refresh ottenuto dal login

    ValidateTokenRequest:
      type: object
      required:
        - token
      properties:
        token:
          type: string
          description: Token JWT da validare

    CreateAccountRequest:
      type: object
      required:
        - userId
      properties:
        userId:
          type: integer
          format: int64
          description: ID dell'utente per cui creare il conto

    NewCardRequest:
      type: object
      required:
        - accountId
      properties:
        accountId:
          type: integer
          format: int64
          description: ID del conto a cui collegare la carta

    TransactionRequest:
      type: object
      required:
        - accountId
        - amount
      properties:
        accountId:
          type: integer
          format: int64
          description: ID del conto per la transazione
        amount:
          type: string
          description: Importo della transazione (formato stringa per precisione)
          example: "150.75"
        description:
          type: string
          maxLength: 255
          description: Descrizione opzionale della transazione

    TransferRequest:
      type: object
      required:
        - fromAccountId
        - toAccountId
        - amount
      properties:
        fromAccountId:
          type: integer
          format: int64
          description: ID del conto di origine
        toAccountId:
          type: integer
          format: int64
          description: ID del conto di destinazione
        amount:
          type: string
          description: Importo del trasferimento
          example: "500.00"
        description:
          type: string
          maxLength: 255
          description: Descrizione opzionale del trasferimento

    # Response DTOs
    AuthResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Login successful"
        token:
          type: string
          description: Token JWT di accesso (24h)
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        refreshToken:
          type: string
          description: Token di refresh (7 giorni)
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        user:
          $ref: '#/components/schemas/User'

    TokenResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        token:
          type: string
          description: Nuovo token JWT di accesso
        refreshToken:
          type: string
          description: Token di refresh (invariato)

    ValidateTokenResponse:
      type: object
      properties:
        valid:
          type: boolean
          description: true se il token è valido
        email:
          type: string
          format: email
          description: Email estratta dal token (se valido)

    AccountResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Conto creato con successo"
        account:
          $ref: '#/components/schemas/Account'

    CardResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Carta creata con successo"
        card:
          $ref: '#/components/schemas/Card'

    TransactionResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Transazione completata con successo"
        transaction:
          $ref: '#/components/schemas/Transaction'

    PaginatedTransactionResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        accountId:
          type: integer
          format: int64
        transactions:
          type: array
          items:
            $ref: '#/components/schemas/Transaction'
        currentPage:
          type: integer
          description: Pagina corrente (0-based)
        totalPages:
          type: integer
          description: Numero totale di pagine
        totalElements:
          type: integer
          format: int64
          description: Numero totale di elementi
        hasNext:
          type: boolean
          description: true se esiste una pagina successiva
        hasPrevious:
          type: boolean
          description: true se esiste una pagina precedente

    SuccessResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Operazione completata con successo"

    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          example: "Messaggio di errore"

    # Entity models
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: ID univoco dell'utente
        email:
          type: string
          format: email
          description: Indirizzo email
        firstName:
          type: string
          description: Nome
        lastName:
          type: string
          description: Cognome
        fullName:
          type: string
          description: Nome completo (nome + cognome)
          example: "Mario Rossi"
        dateOfBirth:
          type: string
          format: date
          description: Data di nascita
        fullAddress:
          type: string
          description: Indirizzo completo formattato
          example: "Via Roma 123, 20100 Milano (MI), Italia"
        registeredDocument:
          type: string
          description: Tipo di documento registrato
          example: "Carta d'Identità"

    Account:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: ID univoco del conto
        accountNumber:
          type: string
          maxLength: 34
          description: Numero IBAN del conto
          example: "IT 60 X05472 81110 000000123456"
        balance:
          type: string
          description: Saldo del conto (precisione decimale)
          example: "1250.75"
        isActive:
          type: boolean
          description: Stato del conto (true = attivo, false = congelato)
        dateOpened:
          type: string
          format: date-time
          description: Data di apertura del conto
        owner:
          type: object
          description: Informazioni del proprietario del conto
          properties:
            id:
              type: integer
              format: int64
            fullName:
              type: string
              example: "Mario Rossi"
            email:
              type: string
              format: email

    Card:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: ID univoco della carta
        cardNumber:
          type: string
          description: Numero carta mascherato per sicurezza
          example: "**** **** **** 3456"
        expiryDate:
          type: string
          format: date
          description: Data di scadenza della carta
        isActive:
          type: boolean
          description: Stato della carta (true = attiva, false = bloccata)
        owner:
          type: string
          description: Nome del proprietario della carta
          example: "Mario Rossi"
        accountNumber:
          type: string
          description: Numero IBAN del conto collegato
          example: "IT 60 X05472 81110 000000123456"

    Transaction:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: ID univoco della transazione
        transactionId:
          type: string
          description: ID pubblico della transazione (UUID)
          example: "123e4567-e89b-12d3-a456-426614174000"
        amount:
          type: string
          description: Importo della transazione
          example: "150.00"
        description:
          type: string
          maxLength: 255
          description: Descrizione della transazione
        type:
          $ref: '#/components/schemas/TransactionType'
        status:
          $ref: '#/components/schemas/TransactionStatus'
        timestamp:
          type: string
          format: date-time
          description: Data e ora della transazione
        fromAccount:
          type: object
          description: Informazioni del conto di origine
          nullable: true
          properties:
            id:
              type: integer
              format: int64
            accountNumber:
              type: string
            ownerName:
              type: string
        toAccount:
          type: object
          description: Informazioni del conto di destinazione
          nullable: true
          properties:
            id:
              type: integer
              format: int64
            accountNumber:
              type: string
            ownerName:
              type: string

    # Enums
    DocumentType:
      type: string
      enum:
        - CARTA_IDENTITA
        - PASSAPORTO
        - PATENTE
        - PERMESSO_SOGGIORNO
      description: |
        Tipologie di documento di identità supportate:
        * `CARTA_IDENTITA` - Carta d'Identità
        * `PASSAPORTO` - Passaporto
        * `PATENTE` - Patente di Guida
        * `PERMESSO_SOGGIORNO` - Permesso di Soggiorno

    TransactionType:
      type: string
      enum:
        - TRANSFER
        - DEPOSIT
        - WITHDRAWAL
        - PAYMENT
      description: |
        Tipologie di transazione:
        * `TRANSFER` - Trasferimento tra conti interni
        * `DEPOSIT` - Deposito (da esterno)
        * `WITHDRAWAL` - Prelievo (verso esterno)
        * `PAYMENT` - Pagamento

    TransactionStatus:
      type: string
      enum:
        - PENDING
        - COMPLETED
        - FAILED
        - CANCELLED
      description: |
        Stati della transazione:
        * `PENDING` - In sospeso
        * `COMPLETED` - Completata
        * `FAILED` - Fallita
        * `CANCELLED` - Cancellata

security:
  - bearerAuth: []

# Esempi di utilizzo
x-codeSamples:
  - lang: 'cURL'
    source: |
      # Registrazione utente
      curl -X POST "http://localhost:8080/auth/register" \
        -H "Content-Type: application/json" \
        -d '{
          "email": "mario.rossi@email.com",
          "password": "password123",
          "firstName": "Mario",
          "lastName": "Rossi",
          "dateOfBirth": "1990-01-15",
          "phoneNumber": "+39 333 1234567",
          "documentType": "CARTA_IDENTITA",
          "documentNumber": "AB1234567",
          "documentExpiry": "2030-01-15",
          "documentIssuer": "Comune di Milano",
          "street": "Via Roma 123",
          "city": "Milano",
          "postalCode": "20100",
          "province": "MI",
          "country": "Italia"
        }'
      
      # Login
      curl -X POST "http://localhost:8080/auth/login" \
        -H "Content-Type: application/json" \
        -d '{
          "email": "mario.rossi@email.com",
          "password": "password123"
        }'
      
      # Creazione conto (con token)
      curl -X POST "http://localhost:8080/accounts/create" \
        -H "Content-Type: application/json" \
        -H "Authorization: Bearer YOUR_JWT_TOKEN" \
        -d '{"userId": 1}'